package com.local.dao.product;

import com.local.dao.Persistable;
import com.local.model.Product;
import com.local.util.DiskPersistenceManager;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class ProductDAOMemImpl implements ProductDAO, Persistable {
    private ConcurrentHashMap<Integer, Product> products;
    private AtomicInteger autoGeneratedId;
    private DiskPersistenceManager<Integer, Product> diskPersistenceManager;

    public ProductDAOMemImpl() {
        products = new ConcurrentHashMap<>();
        autoGeneratedId = new AtomicInteger(1);
        diskPersistenceManager = new DiskPersistenceManager<>(this, products, Integer.class, Product.class);
    }

    @Override
    public void loadData(){
        diskPersistenceManager.loadData();
    }

    @Override
    public void persistData(){
        diskPersistenceManager.persistData();
    }

    @Override
    public Product addProduct(Product product) {
        int id = autoGeneratedId.getAndIncrement();
        product.setId(id);
        products.put(id, product);
        return new Product(product);
    }

    @Override
    public void updateProduct(Product product) {
        products.put(product.getId(), product);
    }

    @Override
    public Product getProductById(int id) {
        Product product = products.get(id);
        if(product != null) {
            return new Product(product);
        }
        return null;
    }

    @Override
    public Product getProductByName(String name) {
        Product product = products.searchValues(16, (p) -> p.getName().equals(name) ? p : null);
        if(product != null) {
            return new Product(product);
        }
        return null;
    }

    @Override
    public HashSet<Product> getAllProducts() {
        HashSet<Product> newProducts = new HashSet<>();
        for(Product product : products.values()) {
            newProducts.add(new Product(product));
        }
        return newProducts;
    }

    @Override
    public ArrayList<Product> getProductsSortedBySells() {
        ArrayList<Product> sortedProducts = new ArrayList<>(products.values());
        sortedProducts.sort(Comparator.comparingInt(Product::getSold));
        return sortedProducts;
    }

    @Override
    public ArrayList<Product> getProductsSortedByCount() {
        ArrayList<Product> sortedProducts = new ArrayList<>(products.values());
        sortedProducts.sort(Comparator.comparingInt(Product::getCount));
        return sortedProducts;
    }
}
