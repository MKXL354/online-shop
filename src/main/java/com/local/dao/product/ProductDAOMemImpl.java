package com.local.dao.product;

import com.local.model.Product;

import java.util.HashSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class ProductDAOMemImpl implements ProductDAO {
    private ConcurrentHashMap<Integer, Product> products;
    private AtomicInteger autoGeneratedId;

    public ProductDAOMemImpl() {
        products = new ConcurrentHashMap<>();
        autoGeneratedId = new AtomicInteger(1);
    }

    @Override
    public Product addProduct(Product product) {
        int id = autoGeneratedId.getAndIncrement();
        product.setId(id);
        products.put(id, product);
        return new Product(product.getId(), product.getName(), product.getPrice(), product.getCount());
    }

    @Override
    public void updateProduct(Product product) {
        products.put(product.getId(), product);
    }

    @Override
    public Product getProductById(int id) {
        Product product = products.get(id);
        return new Product(product.getId(), product.getName(), product.getPrice(), product.getCount());
    }

    @Override
    public Product getProductByName(String name) {
        Product product = products.searchValues(16, (p) -> p.getName().equals(name) ? p : null);
        if(product != null) {
            return new Product(product.getId(), product.getName(), product.getPrice(), product.getCount());
        }
        return null;
    }

    @Override
    public HashSet<Product> getAllProducts() {
        return new HashSet<>(products.values());
    }
}
