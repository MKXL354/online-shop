package com.local.dao.cart;

import com.local.model.Cart;
import com.local.model.Product;
import com.local.model.User;

import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class CartDAOMemImpl implements CartDAO {
    private ConcurrentHashMap<Integer, Cart> carts;
    private AtomicInteger autoGeneratedId;

    public CartDAOMemImpl() {
        this.carts = new ConcurrentHashMap<>();
        this.autoGeneratedId = new AtomicInteger(1);
    }
    @Override
    public Product getProductInCartById(int cartId, int productId) {
        Set<Product> products = carts.get(cartId).getProducts();
        for (Product product : products) {
            if (product.getId() == productId) {
                return product;
            }
        }
        return null;
    }

    @Override
    public void addProductToCart(Cart cart, Product product) {
        Set<Product> products = carts.get(cart.getId()).getProducts();
        products.add(product);
    }

    @Override
    public void updateProductInCart(Cart cart, Product product) {
        Set<Product> products = carts.get(cart.getId()).getProducts();
        products.removeIf(oldProduct -> oldProduct.getId() == product.getId());
        products.add(product);
    }

    @Override
    public void removeProductFromCart(Cart cart, Product product) {
        Set<Product> products = carts.get(cart.getId()).getProducts();
        products.remove(product);
    }

    @Override
    public Cart getActiveCart(User user) {
        for(Cart cart : carts.values()) {
            if(cart.getUser().getId() == user.getId() && cart.getProcessTime() == null) {
                return cart;
            }
        }
        return null;
    }

    @Override
    public Cart addCartToUser(User user) {
        Cart cart = new Cart(autoGeneratedId.get(), user, null, null);
        carts.put(autoGeneratedId.getAndIncrement(), cart);
        return cart;
    }

    @Override
    public Set<Product> getProductsInCart(int cartId) {
        return carts.get(cartId).getProducts();
    }
}
//TODO: test the thread-safety more
